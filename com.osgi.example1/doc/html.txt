1. HTML5 iframe
https://html.spec.whatwg.org/#the-iframe-element

https://github.com/courajs/pdf-poc
------------------------------------------------------------------------------------------------
<html>
  <head>
    <title>PDFs?</title>
<style>
iframe {
  display: inline-block;
  width: 48vw;
  height: 90%;
}
#html {
  float: left;
}
#pdf {
  float: right;
}
</style>
  </head>
  <body>
    <p>
      The "Git Internals" pdf is provided under the Creative Commons
      Attribution-ShareAlike license by Scott Chacon and Pluralsight, and is
      available <a href="https://github.com/pluralsight/git-internals-pdf">on
      GitHub</a>.
    </p>
    <iframe id=html src=""></iframe>
    <iframe id=pdf src=""></iframe>

    <script src="script.js"></script>
  </body>
</html>
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
var html = document.querySelector('#html');
var pdf = document.querySelector('#pdf');

populateIframe(html, 'other.html', [['x-api-version', 'v1.2']]);
populateIframe(pdf, 'peepcode-git.pdf', [['Authorization', 'Bearer abcd1234']]);

function populateIframe(iframe, url, headers) {
  var xhr = new XMLHttpRequest();

  xhr.open('GET', url);
  xhr.onreadystatechange = handler;
  xhr.responseType = 'blob';
  headers.forEach(function(header) {
    xhr.setRequestHeader(header[0], header[1]);
  });
  xhr.send();

  function handler() {
    if (this.readyState === this.DONE) {
      if (this.status === 200) {
        // this.response is a Blob, because we set responseType above
        iframe.src = URL.createObjectURL(this.response);
      } else {
        console.error('XHR failed', this);
      }
    }
  }
}

function setPDF(blob) {
  document.querySelector('#blob').src = URL.createObjectURL(blob);
}
------------------------------------------------------------------------------------------------

2. HTML5 files
https://www.html5rocks.com/en/tutorials/file/dndfiles/

(1)
------------------------------------------------------------------------------------------------
// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
	// Great success! All the File APIs are supported.
} else {
	alert('The File APIs are not fully supported in this browser.');
}
------------------------------------------------------------------------------------------------

(2)
------------------------------------------------------------------------------------------------
<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
------------------------------------------------------------------------------------------------

(3)
------------------------------------------------------------------------------------------------
<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
</script>
------------------------------------------------------------------------------------------------

(4)
------------------------------------------------------------------------------------------------
<style>
  .thumb {
    height: 75px;
    border: 1px solid #000;
    margin: 10px 5px 0 0;
  }
</style>

<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // Loop through the FileList and render image files as thumbnails.
    for (var i = 0, f; f = files[i]; i++) {

      // Only process image files.
      if (!f.type.match('image.*')) {
        continue;
      }

      var reader = new FileReader();

      // Closure to capture the file information.
      reader.onload = (function(theFile) {
        return function(e) {
          // Render thumbnail.
          var span = document.createElement('span');
          span.innerHTML = ['<img class="thumb" src="', e.target.result,
                            '" title="', escape(theFile.name), '"/>'].join('');
          document.getElementById('list').insertBefore(span, null);
        };
      })(f);

      // Read in the image file as a data URL.
      reader.readAsDataURL(f);
    }
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
------------------------------------------------------------------------------------------------

(5)
------------------------------------------------------------------------------------------------
var blob = file.slice(startingByte, endindByte);
reader.readAsBinaryString(blob);

<style>
  #byte_content {
    margin: 5px 0;
    max-height: 100px;
    overflow-y: auto;
    overflow-x: hidden;
  }
  #byte_range { margin-top: 5px; }
</style>

<input type="file" id="files" name="file" /> Read bytes: 
<span class="readBytesButtons">
  <button data-startbyte="0" data-endbyte="4">1-5</button>
  <button data-startbyte="5" data-endbyte="14">6-15</button>
  <button data-startbyte="6" data-endbyte="7">7-8</button>
  <button>entire file</button>
</span>
<div id="byte_range"></div>
<div id="byte_content"></div>

<script>
  function readBlob(opt_startByte, opt_stopByte) {

    var files = document.getElementById('files').files;
    if (!files.length) {
      alert('Please select a file!');
      return;
    }

    var file = files[0];
    var start = parseInt(opt_startByte) || 0;
    var stop = parseInt(opt_stopByte) || file.size - 1;

    var reader = new FileReader();

    // If we use onloadend, we need to check the readyState.
    reader.onloadend = function(evt) {
      if (evt.target.readyState == FileReader.DONE) { // DONE == 2
        document.getElementById('byte_content').textContent = evt.target.result;
        document.getElementById('byte_range').textContent = 
            ['Read bytes: ', start + 1, ' - ', stop + 1,
             ' of ', file.size, ' byte file'].join('');
      }
    };

    var blob = file.slice(start, stop + 1);
    reader.readAsBinaryString(blob);
  }
  
  document.querySelector('.readBytesButtons').addEventListener('click', function(evt) {
    if (evt.target.tagName.toLowerCase() == 'button') {
      var startByte = evt.target.getAttribute('data-startbyte');
      var endByte = evt.target.getAttribute('data-endbyte');
      readBlob(startByte, endByte);
    }
  }, false);
</script>
------------------------------------------------------------------------------------------------

(6)
------------------------------------------------------------------------------------------------
<style>
  #progress_bar {
    margin: 10px 0;
    padding: 3px;
    border: 1px solid #000;
    font-size: 14px;
    clear: both;
    opacity: 0;
    -moz-transition: opacity 1s linear;
    -o-transition: opacity 1s linear;
    -webkit-transition: opacity 1s linear;
  }
  #progress_bar.loading {
    opacity: 1.0;
  }
  #progress_bar .percent {
    background-color: #99ccff;
    height: auto;
    width: 0;
  }
</style>

<input type="file" id="files" name="file" />
<button onclick="abortRead();">Cancel read</button>
<div id="progress_bar"><div class="percent">0%</div></div>

<script>
  var reader;
  var progress = document.querySelector('.percent');

  function abortRead() {
    reader.abort();
  }

  function errorHandler(evt) {
    switch(evt.target.error.code) {
      case evt.target.error.NOT_FOUND_ERR:
        alert('File Not Found!');
        break;
      case evt.target.error.NOT_READABLE_ERR:
        alert('File is not readable');
        break;
      case evt.target.error.ABORT_ERR:
        break; // noop
      default:
        alert('An error occurred reading this file.');
    };
  }

  function updateProgress(evt) {
    // evt is an ProgressEvent.
    if (evt.lengthComputable) {
      var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      // Increase the progress bar length.
      if (percentLoaded < 100) {
        progress.style.width = percentLoaded + '%';
        progress.textContent = percentLoaded + '%';
      }
    }
  }

  function handleFileSelect(evt) {
    // Reset progress indicator on new file selection.
    progress.style.width = '0%';
    progress.textContent = '0%';

    reader = new FileReader();
    reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert('File read cancelled');
    };
    reader.onloadstart = function(e) {
      document.getElementById('progress_bar').className = 'loading';
    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      progress.style.width = '100%';
      progress.textContent = '100%';
      setTimeout("document.getElementById('progress_bar').className='';", 2000);
    }

    // Read in the image file as a binary string.
    reader.readAsBinaryString(evt.target.files[0]);
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
------------------------------------------------------------------------------------------------

3. HTML5 file upload
https://www.webcodegeeks.com/html5/html5-file-upload-example/
(1) A single file
------------------------------------------------------------------------------------------------
<input type="file" id="fileinput" />

document.getElementById('fileinput').addEventListener('change', function(){
    var file = this.files[0];
    // This code is only for demo ...
    console.log("name : " + file.name);
    console.log("size : " + file.size);
    console.log("type : " + file.type);
    console.log("date : " + file.lastModified);
}, false);
------------------------------------------------------------------------------------------------

(2) Multiple files
------------------------------------------------------------------------------------------------
<input type="file" id="fileinput" multiple="multiple" />

document.getElementById('fileinput').addEventListener('change', function(){
    for(var i = 0; i<this.files.length; i++){
        var file =  this.files[i];
        // This code is only for demo ...
        console.group("File "+i);
        console.log("name : " + file.name);
        console.log("size : " + file.size);
        console.log("type : " + file.type);
        console.log("date : " + file.lastModified);
        console.groupEnd();
    }
}, false);
------------------------------------------------------------------------------------------------

(3) Previewing Files
------------------------------------------------------------------------------------------------
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Preview images</title>
    <style>
        #gallery .thumbnail{
            width:150px;
            height: 150px;
            float:left;
            margin:2px;
        }
        #gallery .thumbnail img{
            width:150px;
            height: 150px;
        }
 
    </style>
</head>
<body>
<h2>Upload images ...</h2>
 
<input type="file" id="fileinput" multiple="multiple" accept="image/*" />
 
<div id="gallery"></div>
<script src="gallery.js"></script>
</body>
</html>
------------------------------------------------------------------------------------------------

gallery.js
------------------------------------------------------------------------------------------------
var uploadfiles = document.querySelector('#fileinput');
uploadfiles.addEventListener('change', function () {
    var files = this.files;
    for(var i=0; i<files.length; i++){
        previewImage(this.files[i]);
    }
}, false);
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
function previewImage(file) {
    var galleryId = "gallery";
 
    var gallery = document.getElementById(galleryId);
    var imageType = /image.*/;
 
    if (!file.type.match(imageType)) {
        throw "File Type must be an image";
    }
 
    var thumb = document.createElement("div");
    thumb.classList.add('thumbnail'); // Add the class thumbnail to the created div
 
    var img = document.createElement("img");
    img.file = file;
    thumb.appendChild(img);
    gallery.appendChild(thumb);
 
    // Using FileReader to display the image content
    var reader = new FileReader();
    reader.onload = (function(aImg) { return function(e) { aImg.src = e.target.result; }; })(img);
    reader.readAsDataURL(file);
}
------------------------------------------------------------------------------------------------

Upload The files
------------------------------------------------------------------------------------------------
function uploadFile(file){
    var url = 'server/index.php';
    var xhr = new XMLHttpRequest();
    var fd = new FormData();
    xhr.open("POST", url, true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 && xhr.status == 200) {
            // Every thing ok, file uploaded
            console.log(xhr.responseText); // handle response.
        }
    };
    fd.append("upload_file", file);
    xhr.send(fd);
}
------------------------------------------------------------------------------------------------

Php
------------------------------------------------------------------------------------------------
if (isset($_FILES['upload_file'])) {
    if(move_uploaded_file($_FILES['upload_file']['tmp_name'], "datas/" . $_FILES['upload_file']['name'])){
        echo $_FILES['upload_file']['name']. " OK";
    } else {
        echo $_FILES['upload_file']['name']. " KO";
    }
    exit;
} else {
    echo "No files uploaded ...";
}
------------------------------------------------------------------------------------------------



3. Access-Control-Allow-Origin
https://stackoverflow.com/questions/10636611/how-does-access-control-allow-origin-header-work
------------------------------------------------------------------------------------------------
Access-Control-Allow-Origin is a CORS (Cross-Origin Resource Sharing) header.

When Site A tries to fetch content from Site B, Site B can send an Access-Control-Allow-Origin response header to tell 
the browser that the content of this page is accessible to certain origins. (An origin is a domain, plus a scheme and 
port number.) By default, Site B's pages are not accessible to any other origin; using the Access-Control-Allow-Origin 
header opens a door for cross-origin access by specific requesting origins.

For each resource/page that Site B wants to make accessible to Site A, Site B should serve its pages with the response 
header:
Access-Control-Allow-Origin: http://siteA.com

Modern browsers will not block cross-domain requests outright. If Site A requests a page from Site B, the browser will 
actually fetch the requested page on the network level and check if the response headers list Site A as a permitted 
requester domain. If Site B has not indicated that Site A is allowed to access this page, the browser will trigger the 
XMLHttpRequest's error event and deny the response data to the requesting JavaScript code.
------------------------------------------------------------------------------------------------


4. html/javascript console or terminal
https://stackoverflow.com/questions/3090108/console-like-interface-on-a-web-page-using-javascript
https://terminal.jcubic.pl/

https://github.com/jcubic/jquery.terminal/blob/master/css/jquery.terminal-2.12.0.css
------------------------------------------------------------------------------------------------
  <div class="terminal-wrapper">
   <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 16 14" style="display: none;">
    <title id="title2">rounded</title>
    <path id="terminal-broken-image" d="m 14,10 h 2 v 1 a 3,3 0 0 1 -3,3 H 3 A 3,3 0 0 1 0,11 H 4.5 A 1.00012,1.00012 0 0 0 5.207,10.707 L 6.5,9.414 7.793,10.707 a 0.99963,0.99963 0 0 0 1.41406,0 l 2.36719,-2.36719 1.80127,1.44092 A 0.99807,0.99807 0 0 0 14,10 Z M 16,3 V 8 H 14.35059 L 12.12451,6.21924 A 0.99846,0.99846 0 0 0 10.793,6.293 L 8.5,8.586 7.207,7.293 a 0.99962,0.99962 0 0 0 -1.41406,0 L 4.08594,9 H 0 V 3 A 3,3 0 0 1 3,0 h 10 a 3,3 0 0 1 3,3 z M 6,4.5 A 1.5,1.5 0 1 0 4.5,6 1.5,1.5 0 0 0 6,4.5 Z"></path>
   </svg>
   <div class="terminal-output" role="log">
    <div data-index="0" class="terminal-command" role="presentation" aria-hidden="true">
     <div style="width: 100%;">
      <span>name:&nbsp;ABC</span>
     </div>
    </div>
    <div data-index="1">
     <div style="width: 100%;">
      <span style="color:#C6AD00;--color:#C6AD00;" data-text="[!] email is only for avatars see ">[!]&nbsp;email&nbsp;is&nbsp;only&nbsp;for&nbsp;avatars&nbsp;see&nbsp;</span>
      <a target="_blank" href="https://github.com/jcubic/jquery.terminal-www/blob/master/service.php#L133" rel="noopener" tabindex="1000" data-text="">service.php#L133</a>
     </div>
    </div>
   </div>
   <div class="cmd" style="width: 100%; --cursor-line:0;">
    <div class="cmd-wrapper" style="">
     <span class="cmd-prompt" style="visibility: visible;"><span data-text="email:&nbsp;">email:&nbsp;</span></span>
     <div class="cmd-cursor-line" role="presentation" aria-hidden="true">
      <span><span data-text="D"><span>D</span></span><span data-text="E"><span>E</span></span><span data-text="F"><span>F</span></span></span>
      <span class="cmd-cursor"><span><span>&nbsp;</span></span></span>
      <span></span>
     </div>
    </div>
    <textarea autocapitalize="off" spellcheck="false" tabindex="1" class="cmd-clipboard"></textarea>
   </div>
  </div>
------------------------------------------------------------------------------------------------

https://stackoverflow.com/questions/16344354/how-to-make-blinking-flashing-text-with-css-3

https://xtermjs.org/

https://hyper.is/
https://github.com/zeit/hyper
https://github.com/electron/electron-api-demos/releases


