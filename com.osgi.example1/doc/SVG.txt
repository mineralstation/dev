///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
0. Specs
http://xahlee.info/js/svg_path_spec.html
http://xahlee.info/js/svg_path_ellipse_arc.html
http://wphooper.com/svg/examples/text.php
http://wphooper.com/svg/examples/line.php
https://vanseodesign.com/web-design/svg-text-layout-and-alignment/

https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use (use)
https://www.w3.org/TR/filter-effects-1/#FilterPrimitivesOverview (for filter)

https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image
https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events/Pinch_zoom_gestures
https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text

SVG tutorials
http://tutorials.jenkov.com/svg/index.html


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. ViewPort and ViewBox
https://webdesign.tutsplus.com/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844
https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox

SVG Image and ViewPort example:

https://codepen.io/pen/?&editable=true
----------------------------------------------------------------------------------------------------------------
<!-- Learn about this code on MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image -->

<svg width="200" height="200"
  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="100 100 200 200">       
  <image xlink:href="https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png" height="200" width="200"/>
</svg>
----------------------------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2. 3D Box
http://www.petercollingridge.co.uk/blog/3d-svg/rotating-3d-svg-cube/


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
3. SVG Flower
https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_and_CSS


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
4. SVG context menu
http://bl.ocks.org/jakosz/ce1e63d5149f64ac7ee9
https://stackoverflow.com/questions/40172226/right-click-menu-on-svg

------------------------------------------------------------------------------------------------
<!DOCTYPE HTML>
<meta charset='utf-8'>
<style>

body {
    background: rgb(200,200,200);
}

svg {
    margin: auto;
    display: block;
    background: white;
}

</style>
<body>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script>

var mainw = 960,
    mainh = 500;

function contextMenu() {
    var height,
        width, 
        margin = 0.1, // fraction of width
        items = [], 
        rescale = false, 
        style = {
            'rect': {
                'mouseout': {
                    'fill': 'rgb(244,244,244)', 
                    'stroke': 'white', 
                    'stroke-width': '1px'
                }, 
                'mouseover': {
                    'fill': 'rgb(200,200,200)'
                }
            }, 
            'text': {
                'fill': 'steelblue', 
                'font-size': '13'
            }
        }; 
    
    function menu(x, y) {
        d3.select('.context-menu').remove();
        scaleItems();

        // Draw the menu
        d3.select('svg')
            .append('g').attr('class', 'context-menu')
            .selectAll('tmp')
            .data(items).enter()
            .append('g').attr('class', 'menu-entry')
            .style({'cursor': 'pointer'})
            .on('mouseover', function(){ 
                d3.select(this).select('rect').style(style.rect.mouseover) })
            .on('mouseout', function(){ 
                d3.select(this).select('rect').style(style.rect.mouseout) });
        
        d3.selectAll('.menu-entry')
            .append('rect')
            .attr('x', x)
            .attr('y', function(d, i){ return y + (i * height); })
            .attr('width', width)
            .attr('height', height)
            .style(style.rect.mouseout);
        
        d3.selectAll('.menu-entry')
            .append('text')
            .text(function(d){ return d; })
            .attr('x', x)
            .attr('y', function(d, i){ return y + (i * height); })
            .attr('dy', height - margin / 2)
            .attr('dx', margin)
            .style(style.text);

        // Other interactions
        d3.select('body')
            .on('click', function() {
                d3.select('.context-menu').remove();
            });

    }
    
    menu.items = function(e) {
        if (!arguments.length) return items;
        for (i in arguments) items.push(arguments[i]);
        rescale = true;
        return menu;
    }

    // Automatically set width, height, and margin;
    function scaleItems() {
        if (rescale) {
            d3.select('svg').selectAll('tmp')
                .data(items).enter()
                .append('text')
                .text(function(d){ return d; })
                .style(style.text)
                .attr('x', -1000)
                .attr('y', -1000)
                .attr('class', 'tmp');
            var z = d3.selectAll('.tmp')[0]
                      .map(function(x){ return x.getBBox(); });
            width = d3.max(z.map(function(x){ return x.width; }));
            margin = margin * width;
            width =  width + 2 * margin;
            height = d3.max(z.map(function(x){ return x.height + margin / 2; }));
            
            // cleanup
            d3.selectAll('.tmp').remove();
            rescale = false;
        }
    }

    return menu;
}

d3.select('body').append('svg').attr('id', 'svg-main')
    .attr('width', mainw)
    .attr('height', mainh);

var menu = contextMenu().items('first item', 'second option', 'whatever, man');

d3.select('svg').append('rect')
    .attr('x', mainw/2 - 30)
    .attr('y', mainh/2 - 30)
    .attr('width', 60)
    .attr('height', 60)
    .on('contextmenu', function(){ 
        d3.event.preventDefault();
        menu(d3.mouse(this)[0], d3.mouse(this)[1]);
    });

</script>
</body>
------------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
5. z-index
https://stackoverflow.com/questions/17786618/how-to-use-z-index-in-svg-elements


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
6. D3 Text
https://stackoverflow.com/questions/38130781/how-to-change-text-elements-in-d3


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
7. shadow glow, back glow and colored glow 

https://stackoverflow.com/questions/9630008/how-can-i-create-a-glow-around-a-rectangle-with-svg
http://jsfiddle.net/drewnoakes/gc8Bt/

https://yoksel.github.io/svg-filters/#/ (tools)

------------------------------------------------------------------------------------------------
<!-- a transparent grey drop-shadow that blends with the background colour -->
<filter id="shadow" width="1.5" height="1.5" x="-.25" y="-.25">
    <feGaussianBlur in="SourceAlpha" stdDeviation="2.5" result="blur"/>
    <feColorMatrix result="bluralpha" type="matrix" values=
            "1 0 0 0   0
             0 1 0 0   0
             0 0 1 0   0
             0 0 0 0.4 0 "/>
    <feOffset in="bluralpha" dx="3" dy="3" result="offsetBlur"/>
    <feMerge>
        <feMergeNode in="offsetBlur"/>
        <feMergeNode in="SourceGraphic"/>
    </feMerge>
</filter>

<!-- a transparent grey glow with no offset -->
<filter id="black-glow">
    <feColorMatrix type="matrix" values=
                "0 0 0 0   0
                 0 0 0 0   0
                 0 0 0 0   0
                 0 0 0 0.7 0"/>
    <feGaussianBlur stdDeviation="2.5" result="coloredBlur"/>
    <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
    </feMerge>
</filter>

<!-- a transparent glow that takes on the colour of the object it's applied to -->
<filter id="glow">
    <feGaussianBlur stdDeviation="2.5" result="coloredBlur"/>
    <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
    </feMerge>
</filter>
------------------------------------------------------------------------------------------------

https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow
(shadow behind a circle)
------------------------------------------------------------------------------------------------
<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <filter id="shadow">
      <feDropShadow dx="0.2" dy="0.4" stdDeviation="0.2"/>
    </filter>
  </defs>

  <circle cx="50%" cy="50%" r="4" style="fill:pink; filter:url(#shadow);"/>
</svg>
------------------------------------------------------------------------------------------------

https://www.w3schools.com/graphics/tryit.asp?filename=trysvg_feoffset2
------------------------------------------------------------------------------------------------
<svg height="140" width="140">
  <defs>
    <filter id="f1" x="0" y="0" width="200%" height="200%">
      <feOffset result="offOut" in="SourceGraphic" dx="10" dy="10" />
      <feGaussianBlur result="blurOut" in="offOut" stdDeviation="10" />
      <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />
    </filter>
  </defs>
  <rect width="90" height="90" stroke="green" stroke-width="1" fill="yellow" filter="url(#f1)" />
  Warning: The rowser does not support inline SVG.
</svg>
------------------------------------------------------------------------------------------------


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
8. perspective

https://stackoverflow.com/questions/30476852/3d-transforms-on-svg-element (3D circle)

https://stackoverflow.com/questions/12919398/perspective-transform-of-svg-paths-four-corner-distort
------------------------------------------------------------------------------------------------
div {
  height: 150px;
  width: 150px;
}
.container {
  perspective: 500px;
  border: 1px solid black;
  background: gray;
}
.transformed {
  transform: rotateY(50deg);
  background: blue;
}
<!doctype html>
<html>
<body>
<div class="container">
  <div class="transformed"> Hola! He sido transformado!</div>
</div>
</body>
</html>
------------------------------------------------------------------------------------------------

https://stackoverflow.com/questions/30476852/3d-transforms-on-svg-element
------------------------------------------------------------------------------------------------
<section style="transform: perspective(200px) rotateX(-30deg); transform-origin: 50% 100%; text-align: justify; width: 100px;">
  <p style="backface-visibility: hidden;">TEXTTEXTTEXT</p>
</section>
------------------------------------------------------------------------------------------------

https://stackoverflow.com/questions/23485222/3d-transform-perspective-in-svg
------------------------------------------------------------------------------------------------
  <div id="outer">
    <svg id="inner" width="500" height="500">
      <image x="20" y="90" width="200" height="200" xlink:href='http://www.w3schools.com/html/smiley.gif' />
    </svg>
  </div>
------------------------------------------------------------------------------------------------


https://stackoverflow.com/questions/23485222/3d-transform-perspective-in-svg
http://jsfiddle.net/DCqUp/
------------------------------------------------------------------------------------------------
#outer {
  padding: 20px;
  background-color: blue;
  -webkit-transform: perspective(400px) rotateX(45deg);
  -webkit-transform-style: preserve-3d;  
}

#inner {
  -webkit-transform: rotateX(-45deg);
  -webkit-transform-origin: bottom center;
}
------------------------------------------------------------------------------------------------


https://www.quackit.com/css/properties/webkit/css_-webkit-transform.cfm


https://bl.ocks.org/mbostock/10571478 (painting on the wall)

9 defs

(1) use
https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
------------------------------------------------------------------------------------------------
<svg viewBox="-40 0 150 100" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <g fill="grey"
     transform="rotate(-10 50 100)
                translate(-36 45.5)
                skewX(40)
                scale(1 0.5)">
    <path id="heart" d="M 10,30 A 20,20 0,0,1 50,30 A 20,20 0,0,1 90,30 Q 90,60 50,90 Q 10,60 10,30 z" />
  </g>
 
  <use xlink:href="#heart" fill="none" stroke="red"/>
</svg>
------------------------------------------------------------------------------------------------

https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs
------------------------------------------------------------------------------------------------
<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <!-- Some graphical objects to use -->
  <defs>
    <circle id="myCircle" cx="0" cy="0" r="5" />

    <linearGradient id="myGradient" gradientTransform="rotate(90)">
      <stop offset="20%" stop-color="gold" />
      <stop offset="90%" stop-color="red" />
    </linearGradient>
  </defs>
 
  <!-- using my graphical objects -->
  <use x="5" y="5" xlink:href="#myCircle" fill="url('#myGradient')" />
</svg>
------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------
<g class="noselect" height="1000" id="__bgpart__" stroke-width="0px" widget="" width="1000" x="0" y="0">
    <line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.15" stroke-width="1px" x1="50" x2="950" y1="0" y2="0"></line>
	<line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.15" stroke-width="1px" x1="1000" x2="1000" y1="25" y2="975"></line>
    <line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.15" stroke-width="1px" x1="950" x2="50" y1="1000" y2="1000"></line>
    <line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.15" stroke-width="1px" x1="0" x2="0" y1="975" y2="25"></line>
    <line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.3" stroke-width="2px" x1="495" x2="505" y1="500" y2="500"></line>
    <line stroke="#dad9d9" stroke-linecap="round" stroke-opacity="0.3" stroke-width="2px" x1="500" x2="500" y1="495" y2="505"></line>
    <rect fill="#6EAEB2" fill-opacity="0.15" height="19" rx="3" ry="3" stroke="#62C5EA" stroke-opacity="0.15" stroke-width="1px" width="50" x="-25" y="-9"></rect>
    <text dx="-14" dy="4" fill="lightgrey" font-size="11" stroke-width="0px" x="0" y="0">0,0,0</text>
</g>
------------------------------------------------------------------------------------------------

<use xlink:href="#__bgpart__" />


patterns with tiles
https://designmodo.com/svg-patterns/


10. SVG with scrollbar
https://stackoverflow.com/questions/45802877/overflow-y-scroll-not-working-showing-style-but-cannot-be-scrolled
https://stackoverflow.com/questions/34206459/scroll-is-not-working-inside-svg-foreign-object-in-chrome
https://bugs.chromium.org/p/chromium/issues/detail?id=568614
http://jsfiddle.net/ranr/ncry8Lmx/

11. ClipPath
http://tutorials.jenkov.com/svg/clip-path.html
------------------------------------------------------------------------------------------------
  <defs>
      <clipPath id="clipPath">
          <rect x="15" y="15" width="40" height="40" />
      </clipPath>
  </defs>
  <circle cx="25" cy="25" r="20" style="fill: #0000ff; clip-path: url(#clipPath); " />


<defs>
    <clipPath id="clipPath3">
        <path d="M10,10 q60,60 100,0 q50,50 50,50 l40,0 l-40,40 l-100,-20"/>
    </clipPath>
</defs>
<rect x="5" y="5" width="190" height="90" style="stroke: none; fill:#00ff00; clip-path: url(#clipPath3);"/>


<defs>
    <clipPath id="clipPath4">
        <rect x="10" y="20" width="100" height="20" />
    </clipPath>
</defs>
<g style="clip-path: url(#clipPath4);">
    <rect x="5" y="5" width="190" height="90" style="stroke: none; fill:#00ff00;"/>
    <circle cx="20" cy="20" r="20" style="stroke: none; fill: #ff0000;" />
</g>


<defs>
    <clipPath id="clipPath5">
        <text x="10" y="20" style="font-size: 20px; ">This is a text</text>
    </clipPath>
</defs>
<g style="clip-path: url(#clipPath5);">
    <rect x="5" y="5" width="190" height="90" style="stroke: none; fill:#00ff00;"/>
    <circle cx="20" cy="20" r="20" style="stroke: none; fill: #ff0000;" />
</g>
------------------------------------------------------------------------------------------------          


https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/clip-path


https://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape
------------------------------------------------------------------------------------------------
clip-path: inset(22% 12% 15px 35px);
clip-path: circle(6rem at 12rem 8rem);
clip-path: ellipse(115px 55px at 50% 40%);
clip-path: polygon(50% 20%, 90% 80%, 10% 80%);
clip-path: polygon(50% 2.4%, 34.5% 33.8%, 0% 38.8%, 25% 63.1%, 19.1% 97.6%, 50% 81.3%, 80.9% 97.6%, 75% 63.1%, 100% 38.8%, 65.5% 33.8%);
------------------------------------------------------------------------------------------------

https://vanseodesign.com/web-design/more-about-svg-clipping-paths/
------------------------------------------------------------------------------------------------
<svg width="600" height="300" style="outline: 1px solid red;">  
  <rect x="-50" y="-25" width="200" height="100" fill="#9c6" />  
</svg>


<svg width="600" height="300" style="outline: 5px solid #630; overflow: visible">  
  <rect x="-50" y="-25" width="200" height="100" fill="red" />  
</svg>


<svg width="660" height="220" style="outline: 1px solid #f00; clip-path: circle(100px at 50px 50px);">  
 <rect x="25" y="25" width="200" height="100" fill="#9c6" />  
</svg>


<svg width="660" height="220" style="outline: 1px solid red">  
 <defs>  
   <clipPath id="clip-3" clipPathUnits="userSpaceOnUse">  
     <rect x="10" y="10" width="100" height="100" />  
   </clipPath>  
 </defs>
 <circle cx="110" cy="110" r="100" fill="#9c6" clip-path="url(#clip-3)" />  
</svg>


<svg width="660" height="220" style="outline: 1px solid red">  
 <defs>  
   <clipPath id="quarter-circle-2" clipPathUnits="objectBoundingBox">  
     <rect x="0" y="0" width="0.5" height="0.5" />  
   </clipPath>  
 </defs>
 <circle cx="110" cy="110" r="100" fill="#9c6" clip-path="url(#quarter-circle-2)" />  
</svg>
------------------------------------------------------------------------------------------------




12. Scrollbar with clip-path (ClipPath)
http://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/

https://codepen.io/dabrorius/details/EdQoYe
------------------------------------------------------------------------------------------------
<svg id="main" viewBox="0 0 400 200">
	<rect x="50" y="10" width="300" height="180" fill="#98C8E0"></rect>
	<g id="scrollgroup" x="50" y="10" width="300" height="180" clip-path="url(#scrollbox-clip-path)">
		<rect x="50" y="10" width="300" height="180" opacity="0"></rect>
		<g transform="translate(50,10)">
			<text x="10" ,="" y="20">This is a scrollable SVG group!</text>
			<rect x="100" y="40" width="100" height="100" fill="#F07830"></rect>
			<rect x="100" y="150" width="100" height="100" fill="#781800"></rect>
			<rect x="100" y="260" width="100" height="100" fill="red"></rect>
		</g>
	</g>
	<clipPath id="scrollbox-clip-path">
		<rect x="50" y="10" width="300" height="180"></rect>
	</clipPath>
	// vertical scroll bar
	// need to support dragging on it and moving mouse event
	<rect width="8" rx="4" ry="4" transform="translate(342,10)" height="90"></rect>
</svg>
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
<script id="rendered-js">
/**
 * SVG group elements don't allow setting fixed dimensions and adding scroll bars for overflowing content.
 * Most likely you do not need this, as SVG elements do support scroll bars so in most cases a better solution is having multiple SVG elements that are scrollable.
 *
 * However, adding a scrollable area within an SVG was required in a project I'm working on for a client, so here's an example of how you might go about doing it.
 *
 * Basic elements of the solution are:
 * 1. Clip Path that hides everything outside of defined bounds
 * 2. Custom built scroll bar with D3.drag event attached to it
 * 3. Catching scroll events
 */
const scrollBarWidth = 8;

window.onload = function () {
	let scrollDistance = 0;

	const root = d3.select("#scrollgroup").attr("clip-path", "url(#scrollbox-clip-path)");
  	const parent = d3.select(root.node().parentNode);

  	const rootBBox = {
    	x: parseFloat(root.attr("x")),
    	y: parseFloat(root.attr("y")),
    	width: parseFloat(root.attr("width")),
    	height: parseFloat(root.attr("height"))
    };

	// Move all children of scrollgroup to a content sub-group. I'm doing this because otherwise clip path gets glitchy.
	const contentItems = root.selectAll('*');
	const content = root.append('g').attr('transform', `translate(${rootBBox.x},${rootBBox.y})`);

  	contentItems.each(function (e) {
    	content.node().appendChild(this);
  	});

  	// Add a clip path and a rect within it everything inside the scrollgroup group that does not overlap this rectangle will be hidden
  	const clipRect = parent.append('clipPath').attr('id', 'scrollbox-clip-path').append('rect');
  	clipRect.attr('x', rootBBox.x).attr('y', rootBBox.y).attr('width', rootBBox.width).attr('height', rootBBox.height);

  	// Insert an invisible rect that will catch scroll events as group element itself can't do it.
  	root.insert('rect', 'g').attr('x', rootBBox.x).attr('y', rootBBox.y).attr('width', rootBBox.width).attr('height', rootBBox.height).attr('opacity', 0);

  	// Position the scroll indicator
  	const scrollBar = parent.append('rect').
  	attr('width', scrollBarWidth).
  	attr('rx', scrollBarWidth / 2).
  	attr('ry', scrollBarWidth / 2).
  	attr('transform', `translate(${rootBBox.x + rootBBox.width - scrollBarWidth},${rootBBox.y})`);

  	// Calculate maximum scrollable amount
  	const contentBBox = content.node().getBBox();
  	const absoluteContentHeight = contentBBox.y + contentBBox.height;

  	const scrollbarHeight = rootBBox.height * rootBBox.height / absoluteContentHeight;
  	scrollBar.attr('height', scrollbarHeight);

  	const maxScroll = Math.max(absoluteContentHeight - rootBBox.height, 0);


  	function updateScrollPosition(diff) {
    	scrollDistance += diff;
    	scrollDistance = Math.max(0, scrollDistance);
    	scrollDistance = Math.min(maxScroll, scrollDistance);
	
    	content.attr('transform', `translate(${rootBBox.x},${rootBBox.y - scrollDistance})`);
    	const scrollBarPosition = scrollDistance / maxScroll * (rootBBox.height - scrollbarHeight);
    	scrollBar.attr('y', scrollBarPosition);
  	}

	// Set up scroll events
  	root.on('wheel', e => {
    	updateScrollPosition(event.deltaY);
  	});

  	// Set up scrollbar drag events
  	const dragBehaviour = d3.drag().on("drag", () => {
    	updateScrollPosition(d3.event.dy * maxScroll / (rootBBox.height - scrollbarHeight));
  	});
  	scrollBar.call(dragBehaviour);
};

//# sourceURL=pen.js
</script>
------------------------------------------------------------------------------------------------

12. draggable
https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_ondrag
https://www.w3schools.com/jsref/event_ondrag.asp

http://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/
------------------------------------------------------------------------------------------------
function makeDraggable(evt) {
  var svg = evt.target;
  svg.addEventListener('mousedown', startDrag);
  svg.addEventListener('mousemove', drag);
  svg.addEventListener('mouseup', endDrag);
  svg.addEventListener('mouseleave', endDrag);
  function startDrag(evt) {
  }
  function drag(evt) {
  }
  function endDrag(evt) {
  }
}

function startDrag(evt) {
  if (evt.target.classList.contains('draggable')) {
    selectedElement = evt.target;
  }
}

function drag(evt) {
  if (selectedElement) {
    evt.preventDefault();
    var x = parseFloat(selectedElement.getAttributeNS(null, "x"));
    selectedElement.setAttributeNS(null, "x", x + 0.1);
  }
}

function endDrag(evt) {
  selectedElement = null;
}

function getMousePosition(evt) {
  var CTM = svg.getScreenCTM();
  return {
    x: (evt.clientX - CTM.e) / CTM.a,
    y: (evt.clientY - CTM.f) / CTM.d
  };
}

------------------------------------------------------------------------------------------------


http://bl.ocks.org/enjalot/1378144
------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html>
 <head>
   <title>Chernoff Smileys</title>
   <script type="text/javascript" src="https://mbostock.github.com/d3/d3.js?2.5.0"></script>
   <script type="text/javascript" src="https://mbostock.github.com/d3/d3.layout.js?2.5.0"></script>
   <style type="text/css">

   </style>
 </head>
 <body>

     <p>Click a Smiley<p>

   <script type="text/javascript">


    var drag = d3.behavior.drag()
        .on("drag", function(d,i) {
            d.x += d3.event.dx
            d.y += d3.event.dy
            d3.select(this).attr("transform", function(d,i){
                return "translate(" + [ d.x,d.y ] + ")"
            })
        });


    function face_factory(classname, data, x, y, r)
    { 
        //data format
        //{ "x": 0 - 1 , "y": 0 -1, "z": 0-1 }
        //color could be made a parameter
        //var arc = d3.svg.arc().outerRadius(r)
        //var donut = d3.layout.pie();

        var face = d3.select("#charts")
            .append("svg:g")
                //.data([data.sort(d3.descending)])
                //.data([data])
                .data([ {"x":x, "y":y} ])
                .attr("class", classname)
                .attr("transform", "translate(" + x + "," + y + ")")
                .call(drag);


        console.log("make head");
        var head_color = d3.scale.linear()
            .domain([0, 1])
            .interpolate(d3.interpolateRgb)
            .range(["#ff0000", "#0000ff"]);

        var head = face.append("svg:circle")
                .attr("class", "head")
                .attr("fill", function(d){ return head_color(data.x); })
                .attr("fill-opacity", .8)
                .attr("stroke", "#000")
                .attr("stroke-width", 4)
                .attr("r", r);

        console.log("make mouth");
        var mouth_x = [0, .5, 1];

        var mouth_x_range = d3.scale.linear()
            .domain([0, 1])
            .range([-r/2, r/2]);


        var mouth_y_range = d3.scale.linear()
            .domain([0, 1])
            .range([-r/2, r/2]);

        var mouth_y = [.5, data.y, .5];
        console.log(mouth_y)

        var mouth_line = d3.svg.line()
            .x(function(d,i) {
                return mouth_x_range(mouth_x[i]);
            })
            .y(function(d,i) {
                return mouth_y_range(mouth_y[i]);
            })
            .interpolate("basis");

        /*
        var mouth = face.append("svg:path")
                .attr("class", "mouth")
                .attr("stroke", "#000")
                .attr("stroke-width", 4)
                .attr("fill", "none")
                .attr("transform", "translate(" + [0, r/3] + ")")
                .attr("d", mouth_line(mouth_x));
                */

        console.log("create eyes")
        var eyer = r/10 + data.z * (r/3);
        console.log(eyer);
        var left_eye = face.append("svg:circle")
            .attr("class", "eyes")
            .attr("stroke", "#000")
            .attr("fill", "none")
            .attr("stroke-width", 4)
            .attr("transform", "translate(" + [-r/2.5, -r/3] + ")")
            .attr("r", eyer);

        //eyer = r/10 + data.w * (r/3);
        var right_eye = face.append("svg:circle")
            .attr("class", "eyes")
            .attr("stroke", "#000")
            .attr("fill", "none")
            .attr("stroke-width", 4)
            .attr("transform", "translate(" + [r/2.5, -r/3] + ")")
            .attr("r", eyer);

        var text = face.append("svg:text")
            .text("SMILE!")
            .attr("y", ".5em")
            .attr("transform", "translate(" + [0, r/3] + ")")
            .attr("text-anchor", "middle")
            .attr("font-weight", 700)
            .attr("font-family", "Helvetica")
            .attr("fill", "#ff0")
            .attr("stroke", "none")
            .attr("pointer-events", "none") 

    }

    var w = 700;
    var h = 400;

    //setup svg canvas
    d3.select("body")
        .append("svg:svg")
            .attr("width", w)
            .attr("height", h)
            .attr("id", "charts")
            //.on("click", clickypie)
            .append("svg:rect")
                .attr("width", "100%")
                .attr("height", "100%")
                .attr("stroke", "#000")
                .attr("stroke-width", 3)
                .attr("fill", "none")

    //r = 100;
    for(i = 0; i < 20; i++)
    {
        var r = 20 + Math.random() * 50;
        var data = { "x":Math.random(), "y":Math.random(), "z":Math.random(), "w":Math.random() };
        x = Math.random() * w
        y = Math.random() * h
        face_factory("face"+i, data, x, y, r);
    }
    
   
   </script>
 </body>
</html>
------------------------------------------------------------------------------------------------


https://octoperf.com/blog/2018/04/18/d3-js-drag-and-drop-tutorial/
------------------------------------------------------------------------------------------------
var svg = d3.select("svg");
svg.append("use")
    .attr("href", "#pointer")
    .attr("x", 50)
    .attr("y", 50)
    .attr("fill", "#039BE5")
    .attr("stroke", "#039BE5")
    .attr("stroke-width", "1px");

var deltaX, deltaY;

var dragHandler = d3.drag()
    .on("start", function () {
        var current = d3.select(this);
        deltaX = current.attr("x") - d3.event.x;
        deltaY = current.attr("y") - d3.event.y;
    })
    .on("drag", function () {
        d3.select(this)
            .attr("x", d3.event.x + deltaX)
            .attr("y", d3.event.y + deltaY);
    });

dragHandler(svg.selectAll("use"));
------------------------------------------------------------------------------------------------


13. SVG Knob example (search 'volume tune' images)

https://codepen.io/lchngr/pen/HqGFC
------------------------------------------------------------------------------------------------
%svg(id="level" width="200" height="200")
    %path(d="M 15.39 150 A 98 98 0, 0, 1, 100 2" fill="none" stroke-width="4" stroke="blue")
%svg(id="knob" width="200" height="200" fill="none")
    %circle(cx="100" cy="100" r="80" stroke="grey" stroke-width="4" fill="none")
    %circle(cx="100" cy="35" r="5" stroke="none"   stroke-width="0" fill="grey")
#log
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
var rotate = 0;
var level  = 0;
var mx = Math.cos((210) * Math.PI / 180) * 98 + 100;
var my = Math.sin((210) * Math.PI / 180) * -98 + 100;

var limiter = function(value, lower, upper) {
  if(value < lower) return lower;
  else if(value > upper) return upper;
  else return value;
}

var log = function(msg) {
  $('#log').prepend('<p>' + msg + '</p>');
  $('#log p:gt(9)').remove();
}

$(document).ready(function() {
  $('#knob').on('DOMMouseScroll mousewheel', function(e) {
    e.preventDefault();
    log(e.originalEvent.deltaY);
    rotate += limiter(e.originalEvent.deltaY,-4,4);
    
    //snap only work with osx two finger swipe
    if(rotate > -4 && rotate < 4) rotate = 0;
    if(rotate >= 120) rotate = 120;
    if(rotate <= -120) rotate = -120; 
    
   $(this).css('transform','rotate(' + rotate + 'deg)');
    
    //level = 411 - ((rotate + 120) / 240 * 411);
    //$('#level').css('stroke-dashoffset',level);
    var x = Math.cos((90-rotate) * Math.PI / 180) * 98 + 100;
    var y = Math.sin((90-rotate) * Math.PI / 180) * -98 + 100;
    
    var largeArc = (rotate >= 60) ? 1 : 0;
    
    $('#level').find('path').attr('d','M ' + mx + ' ' + my + ' A 98 98 45, '+ largeArc + ', 1, ' + x + ' ' + y);
  });
});
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
body {
  margin: 0;
  padding: 0;
}

#knob {
  margin: 50px;
  width: 200px;
  height: 200px;
  -webkit-transform: rotate(0deg);
}

#level {
  position: absolute;
  margin: 50px;
  width: 200px;
  height: 200px;
  top: 0;
  left: 0;
  #stroke-dasharray: 411;
  #stroke-dashoffset: 205.5;
}
------------------------------------------------------------------------------------------------


