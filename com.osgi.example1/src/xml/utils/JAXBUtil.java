package xml.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;

import org.origin.common.util.IOUtil;

import com.sun.xml.internal.bind.marshaller.NamespacePrefixMapper;

/**
 * https://howtodoinjava.com/jaxb/marshaller-example/
 *
 * jaxb.encoding – The output encoding to use when marshalling the XML data. The Marshaller will use “UTF-8” by default if this property is not specified.
 * 
 * jaxb.formatted.output – Value can be true or false. Whether or not the Marshaller will format the resulting XML data with line breaks and indentation.
 * Default value is false.
 * 
 * jaxb.schemaLocation – It allows the client application to specify an xsi:schemaLocation attribute in the generated XML data.
 * 
 * jaxb.noNamespaceSchemaLocation – It allows the client application to specify an xsi:noNamespaceSchemaLocation attribute in the generated XML data.
 * 
 * jaxb.fragment – It determines whether or not document level events will be generated by the Marshaller. Value can be true or false.
 *
 *
 * https://dzone.com/articles/jaxb-and-namespace-prefixes
 * 
 */
public class JAXBUtil {

	/**
	 * 
	 * @param packageName
	 * @param formatOutput
	 * @param prefixMapper
	 * @param rootElement
	 * @param xmlFile
	 * @throws JAXBException
	 * @throws IOException
	 */
	public static void generateXml(String packageName, boolean formatOutput, NamespacePrefixMapper prefixMapper, JAXBElement<?> rootElement, File xmlFile) throws JAXBException, IOException {
		FileOutputStream fos = null;
		try {
			fos = new FileOutputStream(xmlFile);
			generateXml(packageName, formatOutput, prefixMapper, rootElement, fos);

		} finally {
			IOUtil.closeQuietly(fos, true);
		}
	}

	/**
	 * 
	 * @param packageName
	 * @param formatOutput
	 * @param prefixMapper
	 * @param rootElement
	 * @param outputStream
	 * @throws JAXBException
	 */
	public static void generateXml(String packageName, boolean formatOutput, NamespacePrefixMapper prefixMapper, JAXBElement<?> rootElement, OutputStream outputStream) throws JAXBException {
		JAXBContext context = JAXBContext.newInstance(packageName);
		Marshaller marshaller = context.createMarshaller();
		if (formatOutput) {
			// "jaxb.formatted.output"
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		}
		if (prefixMapper != null) {
			try {
				marshaller.setProperty("com.sun.xml.internal.bind.namespacePrefixMapper", prefixMapper);
				// marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper", new MyNamespaceMapper());
			} catch (PropertyException e) {
				e.printStackTrace();
			}
		}

		marshaller.marshal(rootElement, outputStream);
	}

}
